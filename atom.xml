<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shawlley</title>
  
  <subtitle>post by interest</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-29T21:58:21.559Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>shawlley</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Connection between album genre &amp; color - Experiment for Big-Data course</title>
    <link href="http://example.com/2022/10/29/genre-hue/"/>
    <id>http://example.com/2022/10/29/genre-hue/</id>
    <published>2022-10-29T09:39:21.000Z</published>
    <updated>2022-11-29T21:58:21.559Z</updated>
    
    <content type="html"><![CDATA[<p>This is an experiment for big-data analysis taking advantage of hadoop systems and it’s MapReduce framework.</p><p>In this experiment we researched the connection between different album genres and the color of their covers to find out the most common colors of one specific genre.</p><p><strong>This project aims to do a big-data practice with hadoop map-reduce, which is required by a course assignment. Don’t take it seriously.</strong></p><span id="more"></span><h1 id="Environments-and-Dependencies"><a href="#Environments-and-Dependencies" class="headerlink" title="Environments and Dependencies"></a>Environments and Dependencies</h1><p><strong>Hadoop</strong></p><ul><li>hadoop-streaming</li><li>yarn</li><li>hdfs</li></ul><p><strong>Python</strong></p><ul><li>tqdm</li><li>sklearn</li><li>matplotlib</li><li>pillow</li></ul><h1 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h1><p>We conducted this experiment through a Map-Reduce process. Each album is designated as a mapping task to be processed by a mapper, generating a transient record. Then the reducers would collect, classify and reduce the records to the final result.</p><p><img src="/images/genre-hue/map-reduce.svg" alt="map-reduce"></p><p><strong>Map</strong></p><p>Basically, a mapper would read records from the dataset. For each album(a given record), the mapper would request its url, fetch the cover, normalize the image, and then extract its main color taking advantage of KMeans. And mappers would generate transient records consisting of genres and main colors, and these records would then be fed to reducers.</p><p><strong>Reduce</strong></p><p>Reducers read transient records generated by mappers, c<br>lassify them by genres, and reduce records of the same genres to get a final result. When all reducers end, the result would be dumped out and we can visualize it to have a insight.</p><h1 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h1><p><strong>Dataset</strong></p><p>The dataset <code>mard_metadata.json</code> comes from <a href="https://www.upf.edu/web/mtg/mard">https://www.upf.edu/web/mtg/mard</a>. It contains a bunch of json records and each record has 2 useful key-value pairs, <code>imUrl</code> which is the url of the cover image of an album and <code>root-genre</code> which is the genre of an album. </p><p><strong>Mapper Result</strong></p><p>Mapper-Result stores the temporary result of the mapping stage. It contains abundant records of genres and main colors, and would be used to generate the ultimate result by reducers.</p><p><strong>Reducer Result</strong></p><p>Reducer-Result is dumped in json format listed as below.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;genre&quot;</span><span class="punctuation">:</span> _<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> _<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hues&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        _<span class="punctuation">,</span></span><br><span class="line">        _<span class="punctuation">,</span></span><br><span class="line">        _<span class="punctuation">,</span></span><br><span class="line">        _<span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Build-and-Run"><a href="#Build-and-Run" class="headerlink" title="Build and Run"></a>Build and Run</h1><p>We ran this pattern on a fake computer cluster composed of docker containers with the following steps.</p><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>The histogram basically lists some album genres and the 4 major colors of their covers. Y axis stands for the number of albums we analyzed, while X axis stands for the genres. Each column is represented in 4 colors which stands for the 4 main colors on the cover of a genre with thicker ones reflecting higher proportions.</p><p>Note that we are not sure whether there is actually any connections between genres and colors of the covers, so this kind of result may not be accurate at all. </p><p><strong>WE MADE IT JUST FOR FUN(ALSO FOR A PRACTICE ON HADOOP MAP-REDUCE) ;)</strong></p><p><img src="/images/genre-hue/result.png" alt="visualization"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;This is an experiment for big-data analysis taking advantage of hadoop systems and it’s MapReduce framework.&lt;/p&gt;
&lt;p&gt;In this experiment we researched the connection between different album genres and the color of their covers to find out the most common colors of one specific genre.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This project aims to do a big-data practice with hadoop map-reduce, which is required by a course assignment. Don’t take it seriously.&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="cloud computing, hadoop" scheme="http://example.com/tags/cloud-computing-hadoop/"/>
    
  </entry>
  
  <entry>
    <title>A tool for NoC visualization</title>
    <link href="http://example.com/2022/10/01/A-tool-for-NoC-visualization/"/>
    <id>http://example.com/2022/10/01/A-tool-for-NoC-visualization/</id>
    <published>2022-10-01T07:23:32.000Z</published>
    <updated>2022-11-29T22:03:31.984Z</updated>
    
    <content type="html"><![CDATA[<p>Our visualization tool <a href="https://github.com/ueqri/vis4mesh">vis4mesh</a> is designed to help the research of NoC!</p><p>Vis4Mesh is a visualization tool for designing mesh Network-on-Chips(NoC) for Wafer-Scale devices, like <a href="https://cerebras.net/blog/cerebras-wafer-scale-engine-why-we-need-big-chips-for-deep-learning/">Cerebras Wafer Scale Engine</a>.</p><p>It is mainly assisted with NoC traffic research in <a href="https://gitlab.com/akita">Akita project</a>, also capable for other scenarios to visualize the mesh topology and traffics.</p><span id="more"></span><p><strong>Notice: This project is still under development, some of the features are not solid. We would update the documents after every new milestone.</strong></p><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>The large scale of the wafer makes it difficult for a designer to get insight into the network behavior simply from the numbers like bandwidth and latency of links. A visualization tool with a view of mixed temporal and spatial statistics would benefit the architects to analyze the performance issues of wafer-scale devices.</p><p>After reviewing the existing visualization tool, we found no systematic solution that is directly applicable to visualizing wafer-scale NoC, mainly due to the scalability and unique requirement of NoC. Thus we propose Vis4Mesh with the five key features as follows.</p><h2 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h2><ol><li><p><strong>Overview of mixed temporal and spatial statistics</strong></p><p>The temporal view help to distinguish the communication pattern, while the spatial points out the hotspot location in the mesh. We also provide a temporal overview of one switch&#x2F;channel if you click it, like switch buffer pressure over time.</p></li><li><p><strong>Sheer scalability to visualize wafers with millions of devices</strong></p><p>Existing network visualization tools do not consider the scale of wafers with millions of nodes and links. We design the tool targeting large-scale mesh system, using a hierarchy packing and unpacking way to support a smooth and intelligible zoom, with well-optimized rendering performance.</p></li><li><p><strong>Dynamic player of network-on-chip traffic</strong></p><p>In pause mode, the tool could display the traffic statistics of any time, and brush a time range to see the details of a stage&#x2F;pattern.<br>In play mode, it would show the dynamic changes of traffic to look at the behavior of the whole or part network.</p></li><li><p><strong>Flexibility to cluster nodes as a functional module</strong></p><p>Clustering is quite common in the field of Coarse Grain Reconfigurable Architecture. We propose a flexible way to select nodes in frontend to build a different-sized cluster directly.</p></li><li><p><strong>Collaboration with another mature visualization tool</strong></p><p>Akita project already integrates with <a href="https://osf.io/73ry8/">Akita Daisen</a>, a tool for visualizing component-level GPU execution like the request to caches, the process of compute units.<br>Vis4Mesh could serve as a supplementary of Daisen to support mesh network traffic visualization that Daisen could not perform very well.</p></li></ol><h2 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h2><p>Briefly, the tool consists of two parts: <strong>Web frontend</strong> and <strong>Server backend</strong>. Frontend only do rendering work, backend feeds the frontend with full graph details through WebSocket.</p><p>For details, please refer to <a href="doc/design.md">doc&#x2F;design.md</a>.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h2 id="Detached-Mode"><a href="#Detached-Mode" class="headerlink" title="Detached Mode"></a>Detached Mode</h2><p>To use the <strong>frontend</strong>, you can directly access <a href="https://ueqri.github.io/vis4mesh-release/">https://ueqri.github.io/vis4mesh-release/</a>. The page is built by GitHub Actions on the latest release.</p><p>To use the <strong>backend</strong>, you can either use our example server for Akkalat in <code>src</code>, or your customized server with port 8080 listened for WebSockets and communication protocol supported. The backend is more complex to run in detached mode, please see <a href="doc/design.md">doc&#x2F;backend.md</a> for more details.</p><h2 id="Container-Mode"><a href="#Container-Mode" class="headerlink" title="Container Mode"></a>Container Mode</h2><p>Two docker-compose configurations are provided in <a href="https://github.com/ueqri/vis4mesh/blob/main/docker-compose.yml">docker-compose.yml</a> and <a href="https://github.com/ueqri/vis4mesh/blob/main/example/one-key.yml">example&#x2F;one-key.yml</a>. Based on these environments, there are two options to choose respectively.</p><h3 id="Setup-server-and-database-in-Docker"><a href="#Setup-server-and-database-in-Docker" class="headerlink" title="Setup server and database in Docker"></a>Setup server and database in Docker</h3><p><em>Backend server</em> and <em>Redis DB</em> are packed into Docker as <a href="https://github.com/ueqri/vis4mesh/blob/main/docker-compose.yml">docker-compose.yml</a>, which make it convenient to build and maintain the backend.</p><p>Here we also introduce how to build frontend in the host, if you choose aforementioned online site, just skip the frontend build.</p><h4 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h4><ul><li><strong>frontend</strong>: npm(v8.0+), NodeJS(v16.0+)</li><li><strong>backend</strong>: docker(v20.0+), docker-compose(v2.0+)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:ueqri/vis4mesh.git</span><br><span class="line"><span class="built_in">cd</span> vis4mesh</span><br><span class="line"><span class="comment"># if you use online site, skip the two `npm` commands</span></span><br><span class="line">npm install</span><br><span class="line">npm start <span class="comment"># run webpack with HTTP server in localhost:1234</span></span><br><span class="line">docker-compose up <span class="comment"># add `-d` to run in background</span></span><br></pre></td></tr></table></figure><p>To close the container, use <kbd>Ctrl</kbd> + <kbd>C</kbd> to stop in interactive mode, then <code>docker-compose down</code>.</p><h3 id="Setup-all-components-in-Docker"><a href="#Setup-all-components-in-Docker" class="headerlink" title="Setup all components in Docker"></a>Setup all components in Docker</h3><p>Use one-key docker-compose file to set up both <strong>frontend</strong> and <strong>backend</strong> in Docker.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:ueqri/vis4mesh.git</span><br><span class="line"><span class="built_in">cd</span> vis4mesh</span><br><span class="line">docker-compose -f example/one-key.yml up <span class="comment"># add `-d` to run in background</span></span><br></pre></td></tr></table></figure><p>Likewise, <code>docker-compose -f example/one-key.yml down</code> to close.</p><h2 id="After-Setup"><a href="#After-Setup" class="headerlink" title="After Setup"></a>After Setup</h2><p>If it’s all set, just open your favorable browser to view <a href="http://localhost:1234/">http://localhost:1234/</a> and see the visualization.</p><p>We have provided a demo DB generated by FIR(length:100000) in 8x8 Wafer-scale GPU <a href="https://github.com/ueqri/akkalat/tree/v3">akkalat v3</a>. And all the backend config would be well done by docker-compose.</p><h2 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow-up"></a>Follow-up</h2><p>As for follow-up work, we’d implemented these features:</p><ul><li><input disabled="" type="checkbox"> Fine-tune the zoom interaction for large-scale visualization</li><li><input disabled="" type="checkbox"> Trace more status data of switch and channels in <a href="https://github.com/ueqri/akkalat">Akita Akkalat</a> and show in side canvas</li><li><input disabled="" type="checkbox"> Add minimap for mesh as another spatial overview</li><li><input disabled="" type="checkbox"> Add configuration in front to change data port</li><li><input disabled="" type="checkbox"> Build the detailed documents about the design and protocols</li></ul><h2 id="Snapshot-of-Main-Layout"><a href="#Snapshot-of-Main-Layout" class="headerlink" title="Snapshot of Main Layout"></a>Snapshot of Main Layout</h2><p><img src="/images/vis4mesh/v0.2.3.png" alt="pic"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://syifan.github.io/akita_hpca2020_tutorial.html">Tutorial on the Akita Simulator Framework and MGPUSim</a></p><p><a href="https://gitlab.com/akita">GitLab of Akita Simulator Framework</a></p><p><a href="https://docs.docker.com/compose/install/">Docker Docs: Install Docker Compose</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Our visualization tool &lt;a href=&quot;https://github.com/ueqri/vis4mesh&quot;&gt;vis4mesh&lt;/a&gt; is designed to help the research of NoC!&lt;/p&gt;
&lt;p&gt;Vis4Mesh is a visualization tool for designing mesh Network-on-Chips(NoC) for Wafer-Scale devices, like &lt;a href=&quot;https://cerebras.net/blog/cerebras-wafer-scale-engine-why-we-need-big-chips-for-deep-learning/&quot;&gt;Cerebras Wafer Scale Engine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is mainly assisted with NoC traffic research in &lt;a href=&quot;https://gitlab.com/akita&quot;&gt;Akita project&lt;/a&gt;, also capable for other scenarios to visualize the mesh topology and traffics.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>A interesting concurrency bug with golang</title>
    <link href="http://example.com/2022/08/17/A-interesting-concurrency-bug-with-golang/"/>
    <id>http://example.com/2022/08/17/A-interesting-concurrency-bug-with-golang/</id>
    <published>2022-08-17T03:19:55.000Z</published>
    <updated>2022-11-29T22:37:05.560Z</updated>
    
    <content type="html"><![CDATA[<p>It is always dangerous to execute concurrent jobs.</p><p>From below you can see a piece of golang code, and here are two questions</p><ul><li>What is the bug in the code?</li><li>How to fix it?</li></ul><span id="more"></span><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> job <span class="keyword">struct</span> &#123;</span><br><span class="line">workerIdx <span class="type">int</span></span><br><span class="line">jobIdx    <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j *job)</span></span> run() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;(worker, job): (%d, %d)\n&quot;</span>, j.workerIdx, j.jobIdx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> worker <span class="keyword">struct</span> &#123;</span><br><span class="line">workerGroup *sync.WaitGroup</span><br><span class="line">masterGroup *sync.WaitGroup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *worker)</span></span> work(x *job) &#123;</span><br><span class="line">w.workerGroup.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">defer</span> w.workerGroup.Done()</span><br><span class="line">x.run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *worker)</span></span> Dispatch(x *job) &#123;</span><br><span class="line"><span class="keyword">go</span> w.work(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *worker)</span></span> cleanExit() &#123;</span><br><span class="line">w.masterGroup.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">defer</span> w.masterGroup.Done()</span><br><span class="line">w.workerGroup.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *worker)</span></span> Close() <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">go</span> w.cleanExit()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> master <span class="keyword">struct</span> &#123;</span><br><span class="line">wg *sync.WaitGroup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *master)</span></span> Arrange() *worker &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;worker&#123;</span><br><span class="line">workerGroup: &amp;sync.WaitGroup&#123;&#125;,</span><br><span class="line">masterGroup: m.wg,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *master)</span></span> Close() <span class="type">error</span> &#123;</span><br><span class="line">m.wg.Wait()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := &amp;master&#123;</span><br><span class="line">wg: &amp;sync.WaitGroup&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">w := m.Arrange()</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">w.Dispatch(&amp;job&#123;</span><br><span class="line">workerIdx: i,</span><br><span class="line">jobIdx:    j,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">w.Close()</span><br><span class="line">&#125;</span><br><span class="line">m.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="answer"><a href="#answer" class="headerlink" title="answer"></a>answer</h1><ol><li><p><code>worker.cleanExit</code> is executed by goroutine. There is a chance that <code>worker.cleanExit</code> has not been scheduled yet before <code>master.close</code> finish, and maybe some workers will not be monitored by the master. This is not a clean exit for master.</p></li><li><p>fix: move <code>w.masterGroup.Add(1)</code> from <code>worker.cleanExit</code> to <code>master.Arrange</code></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;It is always dangerous to execute concurrent jobs.&lt;/p&gt;
&lt;p&gt;From below you can see a piece of golang code, and here are two questions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is the bug in the code?&lt;/li&gt;
&lt;li&gt;How to fix it?&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="golang, concurrency" scheme="http://example.com/tags/golang-concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/06/03/hello-world/"/>
    <id>http://example.com/2022/06/03/hello-world/</id>
    <published>2022-06-03T14:39:21.000Z</published>
    <updated>2022-11-29T22:03:54.324Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
